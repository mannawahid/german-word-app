import streamlit as st
import pandas as pd
import random
import time

# === Vocabulary ===
vocab = {
    "ansehen": {"bangla": "‡¶¶‡ßá‡¶ñ‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶õ‡¶¨‡¶ø‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø‡•§"},
    "das Bild, -er": {"bangla": "‡¶õ‡¶¨‡¶ø", "sentence": "‡¶õ‡¶¨‡¶ø‡¶ü‡¶æ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡•§"},
    "h√∂ren": {"bangla": "‡¶∂‡ßã‡¶®‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶ó‡¶æ‡¶® ‡¶∂‡ßÅ‡¶®‡¶ø‡•§"},
    "ankreuzen": {"bangla": "‡¶ü‡¶ø‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ", "sentence": "‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá ‡¶ü‡¶ø‡¶ï ‡¶¶‡¶ø‡¶®‡•§"},
    "zuordnen": {"bangla": "‡¶Æ‡¶ø‡¶≤‡¶æ‡¶®‡ßã", "sentence": "‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Æ‡¶ø‡¶≤‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶®‡•§"},
    "machen": {"bangla": "‡¶ï‡¶∞‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø‡•§"},
    "lesen": {"bangla": "‡¶™‡ßú‡¶æ", "sentence": "‡¶∏‡ßá ‡¶¨‡¶á ‡¶™‡ßú‡ßá‡•§"},
    "essen": {"bangla": "‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡ßá‡¶≤ ‡¶ñ‡¶æ‡¶á‡•§"},import streamlit as st
import random, time, pandas as pd

# === Vocabulary ===
vocab = {
    "ansehen": {"bangla": "‡¶¶‡ßá‡¶ñ‡¶æ", "sentence": "Ich sehe das Bild."},
    "das Bild, -er": {"bangla": "‡¶õ‡¶¨‡¶ø", "sentence": "Das Bild ist sch√∂n."},
    "h√∂ren": {"bangla": "‡¶∂‡ßã‡¶®‡¶æ", "sentence": "Ich h√∂re Musik."},
    "ankreuzen": {"bangla": "‡¶ü‡¶ø‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ", "sentence": "Kreuzen Sie die richtige Antwort an."},
    "zuordnen": {"bangla": "‡¶Æ‡¶ø‡¶≤‡¶æ‡¶®‡ßã", "sentence": "Ordnen Sie die W√∂rter zu."},
    "machen": {"bangla": "‡¶ï‡¶∞‡¶æ", "sentence": "Ich mache meine Hausaufgaben."},
    "lesen": {"bangla": "‡¶™‡ßú‡¶æ", "sentence": "Er liest ein Buch."},
    "essen": {"bangla": "‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ", "sentence": "Ich esse einen Apfel."},
    "gehen": {"bangla": "‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ", "sentence": "Ich gehe zur Uni."},
    "sprechen": {"bangla": "‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ", "sentence": "Wir sprechen Deutsch."},
    "wohnen": {"bangla": "‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ", "sentence": "Ich wohne in Bremen."},
}

# === Page setup ===
st.set_page_config(page_title="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‚Üí German Game", page_icon="üá©üá™", layout="centered")
st.title("üáßüá© ‚ûú üá©üá™ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶•‡ßá‡¶ï‡ßá German ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ó‡ßá‡¶Æ")
st.caption("Type the correct German word within time, gain XP, and level up!")

# === Initialize session ===
if "level" not in st.session_state:
    st.session_state.level = 1
    st.session_state.score = 0
    st.session_state.correct = 0
    st.session_state.wrong = 0
    st.session_state.current_index = 0
    st.session_state.quiz_order = list(vocab.items())
    random.shuffle(st.session_state.quiz_order)
    st.session_state.start_time = time.time()
    st.session_state.hint_used = False

# === Helper: timer ===
def remaining_time(start, total=15):
    return max(0, int(total - (time.time() - start)))

# === Game loop ===
if st.session_state.current_index < len(st.session_state.quiz_order):
    german, info = st.session_state.quiz_order[st.session_state.current_index]
    bangla = info["bangla"]
    sentence = info["sentence"]

    st.markdown(f"### üéØ Level {st.session_state.level}")
    st.progress(min(1.0, st.session_state.correct / 5))
    st.info(f"Question {st.session_state.current_index + 1}/{len(st.session_state.quiz_order)}")

    st.markdown(f"**'{bangla}' ‡¶∂‡¶¨‡ßç‡¶¶‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:**")

    if st.session_state.hint_used:
        st.caption(f"üí° Hint: {sentence}")

    # Timer display
    remain = remaining_time(st.session_state.start_time)
    t = st.empty()
    t.warning(f"‚è±Ô∏è Time left: {remain}s")

    time.sleep(0.2)
    remain = remaining_time(st.session_state.start_time)
    t.warning(f"‚è±Ô∏è Time left: {remain}s")

    # User input
    ans = st.text_input("‚úçÔ∏è Type your German answer:", key=f"ans_{st.session_state.current_index}")

    c1, c2, c3 = st.columns(3)
    with c1:
        if st.button("üí° Show Hint"):
            st.session_state.hint_used = True
            st.rerun()

    with c2:
        if st.button("‚úÖ Submit"):
            if ans.strip().lower() == german.lower():
                st.success("‚úÖ Correct!")
                st.session_state.score += 10
                st.session_state.correct += 1
            else:
                st.error(f"‚ùå Wrong! Correct answer: {german}")
                st.session_state.wrong += 1

            st.session_state.current_index += 1
            st.session_state.start_time = time.time()
            st.session_state.hint_used = False

            # Level Up
            if st.session_state.correct % 5 == 0 and st.session_state.correct != 0:
                st.session_state.level += 1
                st.balloons()
                st.success(f"üèÜ Level Up! You reached Level {st.session_state.level}!")
            st.rerun()

    with c3:
        if st.button("‚è≠Ô∏è Skip"):
            st.session_state.current_index += 1
            st.session_state.start_time = time.time()
            st.session_state.hint_used = False
            st.rerun()

else:
    st.balloons()
    st.success("üèÅ Game Over!")
    st.metric("Total Score", st.session_state.score)
    st.metric("Correct Answers", st.session_state.correct)
    st.metric("Wrong Answers", st.session_state.wrong)
    if st.button("üîÅ Restart Game"):
        for k in list(st.session_state.keys()):
            del st.session_state[k]
        st.rerun()

    "gehen": {"bangla": "‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü‡ßá ‡¶Ø‡¶æ‡¶á‡•§"},
    "sprechen": {"bangla": "‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ú‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶® ‡¶¨‡¶≤‡¶ø‡•§"},
    "wohnen": {"bangla": "‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶ø‡•§"},
}

# === Config ===
st.set_page_config(page_title="Deutsch W√∂rter Game", page_icon="üéÆ", layout="centered")
st.title("üéÆ Deutsch W√∂rter Lernen: Game Mode")
st.caption("Fill in the blanks, beat the timer, and level up!")

# === Initialize Session ===
if "level" not in st.session_state:
    st.session_state.level = 1
    st.session_state.score = 0
    st.session_state.correct = 0
    st.session_state.wrong = 0
    st.session_state.current_index = 0
    st.session_state.quiz_order = list(vocab.items())
    random.shuffle(st.session_state.quiz_order)
    st.session_state.start_time = time.time()
    st.session_state.hint_used = False

# === Helper: Timer ===
def get_remaining_time(start_time, total_time=15):
    elapsed = time.time() - start_time
    return max(0, int(total_time - elapsed))

# === Current question ===
if st.session_state.current_index < len(st.session_state.quiz_order):
    german, info = st.session_state.quiz_order[st.session_state.current_index]
    correct_ans = info["bangla"]
    sentence = info["sentence"]

    st.markdown(f"### Level {st.session_state.level}")
    st.progress(min(1.0, st.session_state.correct / 5))
    st.info(f"Question {st.session_state.current_index + 1}/{len(st.session_state.quiz_order)}")

    st.markdown(f"**What's the Bangla meaning of:** `{german}`")
    if st.session_state.hint_used:
        st.caption(f"üí¨ Hint: {sentence}")

    # Timer
    remaining = get_remaining_time(st.session_state.start_time)
    timer_placeholder = st.empty()
    timer_placeholder.warning(f"‚è±Ô∏è Time left: {remaining}s")

    # Continuously update timer
    time.sleep(0.2)
    remaining = get_remaining_time(st.session_state.start_time)
    timer_placeholder.warning(f"‚è±Ô∏è Time left: {remaining}s")

    # User input
    ans = st.text_input("‚úçÔ∏è Type your answer here:", key=f"ans_{st.session_state.current_index}")

    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üí° Show Hint"):
            st.session_state.hint_used = True
            st.rerun()
    with col2:
        if st.button("‚úÖ Submit"):
            if ans.strip() == correct_ans:
                st.success("‚úÖ Correct!")
                st.session_state.score += 10
                st.session_state.correct += 1
            else:
                st.error(f"‚ùå Wrong! Correct answer: {correct_ans}")
                st.session_state.wrong += 1

            st.session_state.current_index += 1
            st.session_state.start_time = time.time()
            st.session_state.hint_used = False

            # Level up after every 5 correct answers
            if st.session_state.correct % 5 == 0 and st.session_state.correct != 0:
                st.session_state.level += 1
                st.balloons()
                st.success(f"üéâ Level Up! You reached Level {st.session_state.level}!")
            st.rerun()
    with col3:
        if st.button("‚è≠Ô∏è Skip"):
            st.session_state.current_index += 1
            st.session_state.start_time = time.time()
            st.session_state.hint_used = False
            st.rerun()
else:
    st.balloons()
    st.success("üèÅ Game Over!")
    st.metric("Total Score", st.session_state.score)
    st.metric("Correct Answers", st.session_state.correct)
    st.metric("Wrong Answers", st.session_state.wrong)
    if st.button("üîÅ Restart Game"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()


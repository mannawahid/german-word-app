import streamlit as st
import pandas as pd
import random

# === Embedded Vocabulary ===
vocab = {
    "ansehen": {"bangla": "ржжрзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЫржмрж┐ржЯрж╛ ржжрзЗржЦрж┐ред"},
    "das Bild, -er": {"bangla": "ржЫржмрж┐", "sentence": "ржЫржмрж┐ржЯрж╛ рж╕рзБржирзНржжрж░ред"},
    "h├╢ren": {"bangla": "рж╢рзЛржирж╛", "sentence": "ржЖржорж┐ ржЧрж╛ржи рж╢рзБржирж┐ред"},
    "noch einmal": {"bangla": "ржЖржмрж╛рж░ ржПржХржмрж╛рж░", "sentence": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржПржХржмрж╛рж░ ржмрж▓рзБржиред"},
    "ankreuzen": {"bangla": "ржЯрж┐ржХ ржЪрж┐рж╣рзНржи ржжрзЗржУрзЯрж╛", "sentence": "рж╕ржарж┐ржХ ржЙрждрзНрждрж░рзЗ ржЯрж┐ржХ ржжрж┐ржиред"},
    "zuordnen": {"bangla": "ржорж┐рж▓рж╛ржирзЛ", "sentence": "рж╢ржмрзНржжржЧрзБрж▓рзЛ ржорж┐рж▓рж┐рзЯрзЗ ржжрж┐ржиред"},
    "erg├дnzen": {"bangla": "ржкрзВрж░ржг ржХрж░рж╛", "sentence": "ржмрж╛ржХрзНржпржЯрж┐ ржкрзВрж░рзНржг ржХрж░рзБржиред"},
    "machen": {"bangla": "ржХрж░рж╛", "sentence": "ржЖржорж┐ ржЖржорж╛рж░ ржмрж╛рзЬрж┐рж░ ржХрж╛ржЬ ржХрж░рж┐ред"},
    "der Kurs, -e": {"bangla": "ржХрзЛрж░рзНрж╕ / ржХрзНрж▓рж╛рж╕", "sentence": "ржХрзЛрж░рзНрж╕ржЯрж┐ ржЖржХрж░рзНрж╖ржгрзАрзЯред"},
    "sprechen": {"bangla": "ржХржерж╛ ржмрж▓рж╛", "sentence": "ржЖржорж░рж╛ ржЬрж╛рж░рзНржорж╛ржи ржмрж▓рж┐ред"},
    "lesen": {"bangla": "ржкрзЬрж╛", "sentence": "рж╕рзЗ ржмржЗ ржкрзЬрзЗред"},
    "schreiben": {"bangla": "рж▓рзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЖржорж╛рж░ ржирж╛ржо рж▓рж┐ржЦрж┐ред"},
    "fragen": {"bangla": "ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рж╛", "sentence": "ржЖржорж┐ рж╢рж┐ржХрзНрж╖ржХржХрзЗ ржкрзНрж░рж╢рзНржи ржХрж░рж┐ред"},
    "antworten": {"bangla": "ржЙрждрзНрждрж░ ржжрзЗржУрзЯрж╛", "sentence": "рж╕рзЗ ржЖржорж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗрзЯред"},
    "kommen": {"bangla": "ржЖрж╕рж╛", "sentence": "ржЖржорж┐ рж╕рзНржХрзБрж▓рзЗ ржЖрж╕рж┐ред"},
    "gehen": {"bangla": "ржпрж╛ржУрзЯрж╛", "sentence": "ржЖржорж┐ ржмрж┐рж╢рзНржмржмрж┐ржжрзНржпрж╛рж▓рзЯрзЗ ржпрж╛ржЗред"},
    "sehen": {"bangla": "ржжрзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЯрзЗрж▓рж┐ржнрж┐рж╢ржи ржжрзЗржЦрж┐ред"},
    "trinken": {"bangla": "ржкрж╛ржи ржХрж░рж╛", "sentence": "ржЖржорж┐ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рж┐ред"},
    "essen": {"bangla": "ржЦрж╛ржУрзЯрж╛", "sentence": "ржЖржорж┐ ржЖржкрзЗрж▓ ржЦрж╛ржЗред"},
    "wohnen": {"bangla": "ржмрж╛рж╕ ржХрж░рж╛", "sentence": "ржЖржорж┐ ржмрзНрж░рзЗржорзЗржирзЗ ржерж╛ржХрж┐ред"},
}

# === Page setup ===
st.set_page_config(page_title="Deutsch W├╢rter Lernen", page_icon="ЁЯЗйЁЯЗк", layout="centered")
st.title("ЁЯЗйЁЯЗк Deutsch W├╢rter Lernen (German тЖФ ржмрж╛ржВрж▓рж╛)")
st.caption("Persistent multiple-choice quiz with BanglaтАУGerman toggle.")

menu = st.sidebar.radio("ЁЯУЪ Menu", ["ЁЯПа Word List", "ЁЯОп Quiz"])

# === Word list page ===
if menu == "ЁЯПа Word List":
    df = pd.DataFrame(
        [{"ЁЯЗйЁЯЗк German": g, "ЁЯЗзЁЯЗй Bangla": v["bangla"], "ЁЯЧгя╕П Example": v["sentence"]}
         for g, v in vocab.items()]
    )
    st.subheader("ЁЯУШ German тЖТ Bangla Vocabulary")
    st.dataframe(df, use_container_width=True)
    st.success(f"Loaded {len(vocab)} words successfully!")

# === Quiz page ===
elif menu == "ЁЯОп Quiz":
    st.subheader("ЁЯОп Multiple-Choice Quiz")
    mode = st.radio("Quiz Direction:", ["ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛", "ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛ тЖТ German"])
    num_q = st.slider("Number of Questions:", 5, 20, 10)

    # initialize once
    if "quiz_words" not in st.session_state or st.session_state.get("last_mode") != mode:
        pairs = list(vocab.items())
        random.shuffle(pairs)
        st.session_state.quiz_words = pairs[:num_q]
        st.session_state.answers = {}
        st.session_state.submitted = False
        st.session_state.last_mode = mode

    quiz_words = st.session_state.quiz_words

    for i, (german, info) in enumerate(quiz_words, start=1):
        correct_bn = info["bangla"]
        sent = info.get("sentence", "")

        if mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
            question = german
            correct_ans = correct_bn
            all_options = [v["bangla"] for v in vocab.values()]
        else:
            question = correct_bn
            correct_ans = german
            all_options = list(vocab.keys())

        wrong = random.sample([o for o in all_options if o != correct_ans],
                              k=min(3, len(all_options) - 1))
        options = wrong + [correct_ans]
        random.shuffle(options)

        st.markdown(f"**{i}. {'Bangla meaning of' if mode == 'ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛' else 'German word for'} '{question}'?**")
        if sent and mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
            st.caption(f"ЁЯТм Example: {sent}")

        key = f"q{i}"
        default_index = options.index(st.session_state.answers[key]) if key in st.session_state.answers and st.session_state.answers[key] in options else 0
        choice = st.radio("Select:", options, key=key, index=default_index)
        st.session_state.answers[key] = choice

    st.divider()

    # --- submit ---
    if st.button("тЬЕ Submit Quiz"):
        correct = 0
        table = []
        for i, (german, info) in enumerate(quiz_words, start=1):
            chosen = st.session_state.answers.get(f"q{i}")
            if mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
                correct_ans = info["bangla"]
                shown = german
            else:
                correct_ans = german
                shown = info["bangla"]
            ok = chosen == correct_ans
            if ok:
                correct += 1
            table.append({
                "Word": shown,
                "Your Answer": chosen,
                "Correct": correct_ans,
                "Result": "тЬФя╕П" if ok else "тЭМ"
            })
        st.session_state.submitted = True
        st.session_state.results = table
        st.session_state.score = correct

    # --- show result ---
    if st.session_state.get("submitted"):
        res = st.session_state.results
        score = st.session_state.score / len(res)
        st.success(f"ЁЯОп You got {st.session_state.score} / {len(res)} correct!")
        st.progress(score)
        st.balloons()
        st.dataframe(pd.DataFrame(res))

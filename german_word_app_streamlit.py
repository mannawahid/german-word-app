import streamlit as st
import random
import pandas as pd

# === Built-in Vocabulary (Excel ржерзЗржХрзЗ embed ржХрж░рж╛) ===
vocab = {
    "ansehen": {"bangla": "ржжрзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЫржмрж┐ржЯрж╛ ржжрзЗржЦрж┐ред"},
    "das Bild, -er": {"bangla": "ржЫржмрж┐", "sentence": "ржЫржмрж┐ржЯрж╛ рж╕рзБржирзНржжрж░ред"},
    "h├╢ren": {"bangla": "рж╢рзЛржирж╛", "sentence": "ржЖржорж┐ ржЧрж╛ржи рж╢рзБржирж┐ред"},
    "noch einmal": {"bangla": "ржЖржмрж╛рж░ ржПржХржмрж╛рж░", "sentence": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржПржХржмрж╛рж░ ржмрж▓рзБржиред"},
    "ankreuzen": {"bangla": "ржЯрж┐ржХ ржЪрж┐рж╣рзНржи ржжрзЗржУрзЯрж╛", "sentence": "рж╕ржарж┐ржХ ржЙрждрзНрждрж░рзЗ ржЯрж┐ржХ ржжрж┐ржиред"},
    "zuordnen": {"bangla": "ржорж┐рж▓рж╛ржирзЛ", "sentence": "рж╢ржмрзНржжржЧрзБрж▓рзЛ ржорж┐рж▓рж┐рзЯрзЗ ржжрж┐ржиред"},
    "erg├дnzen": {"bangla": "ржкрзВрж░ржг ржХрж░рж╛", "sentence": "ржмрж╛ржХрзНржпржЯрж┐ ржкрзВрж░рзНржг ржХрж░рзБржиред"},
    "machen": {"bangla": "ржХрж░рж╛", "sentence": "ржЖржорж┐ ржЖржорж╛рж░ ржмрж╛рзЬрж┐рж░ ржХрж╛ржЬ ржХрж░рж┐ред"},
    "der Kurs, -e": {"bangla": "ржХрзЛрж░рзНрж╕ / ржХрзНрж▓рж╛рж╕", "sentence": "ржХрзЛрж░рзНрж╕ржЯрж┐ ржЖржХрж░рзНрж╖ржгрзАрзЯред"},
    "sprechen": {"bangla": "ржХржерж╛ ржмрж▓рж╛", "sentence": "ржЖржорж░рж╛ ржЬрж╛рж░рзНржорж╛ржи ржмрж▓рж┐ред"},
    "lesen": {"bangla": "ржкрзЬрж╛", "sentence": "рж╕рзЗ ржмржЗ ржкрзЬрзЗред"},
    "schreiben": {"bangla": "рж▓рзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЖржорж╛рж░ ржирж╛ржо рж▓рж┐ржЦрж┐ред"},
    "fragen": {"bangla": "ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рж╛", "sentence": "ржЖржорж┐ рж╢рж┐ржХрзНрж╖ржХржХрзЗ ржкрзНрж░рж╢рзНржи ржХрж░рж┐ред"},
    "antworten": {"bangla": "ржЙрждрзНрждрж░ ржжрзЗржУрзЯрж╛", "sentence": "рж╕рзЗ ржЖржорж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗрзЯред"},
    "kommen": {"bangla": "ржЖрж╕рж╛", "sentence": "ржЖржорж┐ рж╕рзНржХрзБрж▓рзЗ ржЖрж╕рж┐ред"},
    "gehen": {"bangla": "ржпрж╛ржУрзЯрж╛", "sentence": "ржЖржорж┐ ржмрж┐рж╢рзНржмржмрж┐ржжрзНржпрж╛рж▓рзЯрзЗ ржпрж╛ржЗред"},
    "sehen": {"bangla": "ржжрзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЯрзЗрж▓рж┐ржнрж┐рж╢ржи ржжрзЗржЦрж┐ред"},
    "trinken": {"bangla": "ржкрж╛ржи ржХрж░рж╛", "sentence": "ржЖржорж┐ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рж┐ред"},
    "essen": {"bangla": "ржЦрж╛ржУрзЯрж╛", "sentence": "ржЖржорж┐ ржЖржкрзЗрж▓ ржЦрж╛ржЗред"},
    "wohnen": {"bangla": "ржмрж╛рж╕ ржХрж░рж╛", "sentence": "ржЖржорж┐ ржмрзНрж░рзЗржорзЗржирзЗ ржерж╛ржХрж┐ред"},
}

# === Streamlit Config ===
st.set_page_config(page_title="Deutsch W├╢rter Lernen", page_icon="ЁЯЗйЁЯЗк", layout="centered")
st.title("ЁЯЗйЁЯЗк Deutsch W├╢rter Lernen (German тЖФ ржмрж╛ржВрж▓рж╛)")
st.caption("Multiple-choice quiz with answers saved until you submit.")

menu = st.sidebar.radio("ЁЯУЪ Menu", ["ЁЯПа Word List", "ЁЯОп Quiz"])

# === Word List Page ===
if menu == "ЁЯПа Word List":
    st.subheader("ЁЯУШ German тЖТ Bangla Word List")
    df = pd.DataFrame(
        [{"ЁЯЗйЁЯЗк German": g, "ЁЯЗзЁЯЗй Bangla": v["bangla"], "ЁЯЧгя╕П Example": v["sentence"]}
         for g, v in vocab.items()]
    )
    st.dataframe(df, use_container_width=True)
    st.success(f"Loaded {len(vocab)} words successfully!")

# === Quiz Page ===
elif menu == "ЁЯОп Quiz":
    st.subheader("ЁЯОп Multiple-Choice Quiz")

    mode = st.radio("Choose Quiz Mode:", ["ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛", "ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛ тЖТ German"])
    num_questions = st.slider("Number of Questions:", 5, 20, 10)

    # Initialize quiz only once
    if "quiz_words" not in st.session_state or st.session_state.get("last_mode") != mode:
        quiz_words = list(vocab.items())
        random.shuffle(quiz_words)
        st.session_state.quiz_words = quiz_words[:num_questions]
        st.session_state.answers = {}
        st.session_state.last_mode = mode

    quiz_words = st.session_state.quiz_words

    # Display each question
    for idx, (german, info) in enumerate(quiz_words, start=1):
        correct = info["bangla"]
        sentence = info.get("sentence", "")

        if mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
            question = german
            correct_option = correct
            all_options = [v["bangla"] for v in vocab.values()]
        else:
            question = info["bangla"]
            correct_option = german
            all_options = list(vocab.keys())

        wrong_opts = random.sample([opt for opt in all_options if opt != correct_option],
                                   k=min(3, len(all_options) - 1))
        options = wrong_opts + [correct_option]
        random.shuffle(options)

        st.markdown(f"**{idx}. {'What is the Bangla meaning of' if mode == 'ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛' else 'What is the German word for'} '{question}'?**")
        if sentence and mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
            st.caption(f"ЁЯТм Example: {sentence}")

        key = f"q_{idx}"
        selected = st.radio("Select your answer:", options, key=key,
                            index=options.index(st.session_state.answers[key])
                            if key in st.session_state.answers and st.session_state.answers[key] in options
                            else None)
        st.session_state.answers[key] = selected

    st.divider()

    # === Submit button ===
    if st.button("тЬЕ Submit Quiz"):
        result_data = []
        correct_count = 0

        for idx, (german, info) in enumerate(quiz_words, start=1):
            key = f"q_{idx}"
            chosen = st.session_state.answers.get(key)
            if mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
                correct_ans = info["bangla"]
                word_shown = german
            else:
                correct_ans = german
                word_shown = info["bangla"]

            is_correct = chosen == correct_ans
            if is_correct:
                correct_count += 1

            result_data.append({
                "Word": word_shown,
                "Your Answer": chosen if chosen else "тЭМ Not answered",
                "Correct Answer": correct_ans,
                "Result": "тЬФя╕П" if is_correct else "тЭМ"
            })

        st.session_state.result_data = result_data
        st.session_state.score = correct_count

    # === Show results if available ===
    if "result_data" in st.session_state:
        data = st.session_state.result_data
        correct_count = st.session_state.score
        score = correct_count / len(data)
        st.success(f"ЁЯОп You got {correct_count} / {len(data)} correct!")
        st.progress(score)
        st.balloons()
        st.dataframe(pd.DataFrame(data))

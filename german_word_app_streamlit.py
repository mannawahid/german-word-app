import streamlit as st
import pandas as pd
import random

# === Embedded vocabulary (Excel ржерзЗржХрзЗ ржирзЗржУрзЯрж╛) ===
vocab = {
    "ansehen": {"bangla": "ржжрзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЫржмрж┐ржЯрж╛ ржжрзЗржЦрж┐ред"},
    "das Bild, -er": {"bangla": "ржЫржмрж┐", "sentence": "ржЫржмрж┐ржЯрж╛ рж╕рзБржирзНржжрж░ред"},
    "h├╢ren": {"bangla": "рж╢рзЛржирж╛", "sentence": "ржЖржорж┐ ржЧрж╛ржи рж╢рзБржирж┐ред"},
    "noch einmal": {"bangla": "ржЖржмрж╛рж░ ржПржХржмрж╛рж░", "sentence": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржПржХржмрж╛рж░ ржмрж▓рзБржиред"},
    "ankreuzen": {"bangla": "ржЯрж┐ржХ ржЪрж┐рж╣рзНржи ржжрзЗржУрзЯрж╛", "sentence": "рж╕ржарж┐ржХ ржЙрждрзНрждрж░рзЗ ржЯрж┐ржХ ржжрж┐ржиред"},
    "zuordnen": {"bangla": "ржорж┐рж▓рж╛ржирзЛ", "sentence": "рж╢ржмрзНржжржЧрзБрж▓рзЛ ржорж┐рж▓рж┐рзЯрзЗ ржжрж┐ржиред"},
    "erg├дnzen": {"bangla": "ржкрзВрж░ржг ржХрж░рж╛", "sentence": "ржмрж╛ржХрзНржпржЯрж┐ ржкрзВрж░рзНржг ржХрж░рзБржиред"},
    "machen": {"bangla": "ржХрж░рж╛", "sentence": "ржЖржорж┐ ржЖржорж╛рж░ ржмрж╛рзЬрж┐рж░ ржХрж╛ржЬ ржХрж░рж┐ред"},
    "der Kurs, -e": {"bangla": "ржХрзЛрж░рзНрж╕ / ржХрзНрж▓рж╛рж╕", "sentence": "ржХрзЛрж░рзНрж╕ржЯрж┐ ржЖржХрж░рзНрж╖ржгрзАрзЯред"},
    "sprechen": {"bangla": "ржХржерж╛ ржмрж▓рж╛", "sentence": "ржЖржорж░рж╛ ржЬрж╛рж░рзНржорж╛ржи ржмрж▓рж┐ред"},
    "lesen": {"bangla": "ржкрзЬрж╛", "sentence": "рж╕рзЗ ржмржЗ ржкрзЬрзЗред"},
    "schreiben": {"bangla": "рж▓рзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЖржорж╛рж░ ржирж╛ржо рж▓рж┐ржЦрж┐ред"},
    "fragen": {"bangla": "ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рж╛", "sentence": "ржЖржорж┐ рж╢рж┐ржХрзНрж╖ржХржХрзЗ ржкрзНрж░рж╢рзНржи ржХрж░рж┐ред"},
    "antworten": {"bangla": "ржЙрждрзНрждрж░ ржжрзЗржУрзЯрж╛", "sentence": "рж╕рзЗ ржЖржорж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗрзЯред"},
    "kommen": {"bangla": "ржЖрж╕рж╛", "sentence": "ржЖржорж┐ рж╕рзНржХрзБрж▓рзЗ ржЖрж╕рж┐ред"},
    "gehen": {"bangla": "ржпрж╛ржУрзЯрж╛", "sentence": "ржЖржорж┐ ржмрж┐рж╢рзНржмржмрж┐ржжрзНржпрж╛рж▓рзЯрзЗ ржпрж╛ржЗред"},
    "sehen": {"bangla": "ржжрзЗржЦрж╛", "sentence": "ржЖржорж┐ ржЯрзЗрж▓рж┐ржнрж┐рж╢ржи ржжрзЗржЦрж┐ред"},
    "trinken": {"bangla": "ржкрж╛ржи ржХрж░рж╛", "sentence": "ржЖржорж┐ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рж┐ред"},
    "essen": {"bangla": "ржЦрж╛ржУрзЯрж╛", "sentence": "ржЖржорж┐ ржЖржкрзЗрж▓ ржЦрж╛ржЗред"},
    "wohnen": {"bangla": "ржмрж╛рж╕ ржХрж░рж╛", "sentence": "ржЖржорж┐ ржмрзНрж░рзЗржорзЗржирзЗ ржерж╛ржХрж┐ред"},
}

# === Streamlit config ===
st.set_page_config(page_title="Deutsch W├╢rter Lernen", page_icon="ЁЯЗйЁЯЗк", layout="centered")
st.title("ЁЯЗйЁЯЗк Deutsch W├╢rter Lernen (Fill-in-the-Gap Quiz)")
st.caption("Write the correct answer instead of choosing multiple choice. Answers stay saved until you submit.")

menu = st.sidebar.radio("ЁЯУЪ Menu", ["ЁЯПа Word List", "тЬНя╕П Fill-in-the-Gap Quiz"])

# === Word list ===
if menu == "ЁЯПа Word List":
    df = pd.DataFrame(
        [{"ЁЯЗйЁЯЗк German": g, "ЁЯЗзЁЯЗй Bangla": v["bangla"], "ЁЯЧгя╕П Example": v["sentence"]}
         for g, v in vocab.items()]
    )
    st.subheader("ЁЯУШ German тЖФ Bangla Vocabulary")
    st.dataframe(df, use_container_width=True)
    st.success(f"Loaded {len(vocab)} words successfully!")

# === Quiz ===
elif menu == "тЬНя╕П Fill-in-the-Gap Quiz":
    st.subheader("тЬНя╕П Fill-in-the-Gap Quiz")

    # Choose mode
    mode = st.radio("Quiz Direction:", ["ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛", "ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛ тЖТ German"])
    num_q = st.slider("Number of Questions:", 5, 20, 10)

    # Initialize session data
    if "quiz_words" not in st.session_state or st.session_state.get("last_mode") != mode:
        pairs = list(vocab.items())
        random.shuffle(pairs)
        st.session_state.quiz_words = pairs[:num_q]
        st.session_state.answers = {}
        st.session_state.submitted = False
        st.session_state.last_mode = mode

    quiz_words = st.session_state.quiz_words

    # Render questions
    for i, (german, info) in enumerate(quiz_words, start=1):
        bangla = info["bangla"]
        sentence = info.get("sentence", "")

        # question/answer direction
        if mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
            question = german
            correct = bangla
            q_text = f"{i}. Write the Bangla meaning of '{question}':"
        else:
            question = bangla
            correct = german
            q_text = f"{i}. Write the German word for '{question}':"

        st.markdown(f"**{q_text}**")
        if sentence and mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
            st.caption(f"ЁЯТм Example: {sentence}")

        key = f"q{i}"
        st.session_state.answers[key] = st.text_input(
            "Your answer:",
            value=st.session_state.answers.get(key, ""),
            key=key
        )

    st.divider()

    # === Submit ===
    if st.button("тЬЕ Submit Quiz"):
        results = []
        correct_count = 0

        for i, (german, info) in enumerate(quiz_words, start=1):
            ans = st.session_state.answers.get(f"q{i}", "").strip()
            if mode == "ЁЯЗйЁЯЗк German тЖТ ржмрж╛ржВрж▓рж╛":
                correct = info["bangla"]
                shown = german
            else:
                correct = german
                shown = info["bangla"]

            is_ok = ans == correct
            if is_ok:
                correct_count += 1
            results.append({
                "Word": shown,
                "Your Answer": ans if ans else "тАФ",
                "Correct Answer": correct,
                "Result": "тЬФя╕П" if is_ok else "тЭМ"
            })

        st.session_state.results = results
        st.session_state.score = correct_count
        st.session_state.submitted = True

    # === Result section ===
    if st.session_state.get("submitted"):
        data = st.session_state.results
        score = st.session_state.score / len(data)
        st.success(f"ЁЯОп You got {st.session_state.score} / {len(data)} correct!")
        st.progress(score)
        st.balloons()
        st.dataframe(pd.DataFrame(data))

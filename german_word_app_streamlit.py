import streamlit as st
import random
import time
import pandas as pd

# === Vocabulary ===
vocab = {
    "ansehen": {"bangla": "‡¶¶‡ßá‡¶ñ‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶õ‡¶¨‡¶ø‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø‡•§"},
    "das Bild, -er": {"bangla": "‡¶õ‡¶¨‡¶ø", "sentence": "‡¶õ‡¶¨‡¶ø‡¶ü‡¶æ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡•§"},
    "h√∂ren": {"bangla": "‡¶∂‡ßã‡¶®‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶ó‡¶æ‡¶® ‡¶∂‡ßÅ‡¶®‡¶ø‡•§"},
    "noch einmal": {"bangla": "‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞", "sentence": "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§"},
    "ankreuzen": {"bangla": "‡¶ü‡¶ø‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ", "sentence": "‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá ‡¶ü‡¶ø‡¶ï ‡¶¶‡¶ø‡¶®‡•§"},
    "zuordnen": {"bangla": "‡¶Æ‡¶ø‡¶≤‡¶æ‡¶®‡ßã", "sentence": "‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Æ‡¶ø‡¶≤‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶®‡•§"},
    "erg√§nzen": {"bangla": "‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ", "sentence": "‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"},
    "machen": {"bangla": "‡¶ï‡¶∞‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡ßú‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø‡•§"},
    "der Kurs, -e": {"bangla": "‡¶ï‡ßã‡¶∞‡ßç‡¶∏ / ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏", "sentence": "‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡¶ü‡¶ø ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡ßü‡•§"},
    "das Wort, -":er": {"bangla": "‡¶∂‡¶¨‡ßç‡¶¶", "sentence": ""},
    "sprechen": {"bangla": "‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ú‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶® ‡¶¨‡¶≤‡¶ø‡•§"},
    "lesen": {"bangla": "‡¶™‡ßú‡¶æ", "sentence": "‡¶∏‡ßá ‡¶¨‡¶á ‡¶™‡ßú‡ßá‡•§"},
    "schreiben": {"bangla": "‡¶≤‡ßá‡¶ñ‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡¶ø‡•§"},
    "fragen": {"bangla": "‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶ø‡•§"},
    "antworten": {"bangla": "‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ", "sentence": "‡¶∏‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡ßü‡•§"},
    "kommen": {"bangla": "‡¶Ü‡¶∏‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤‡ßá ‡¶Ü‡¶∏‡¶ø‡•§"},
    "gehen": {"bangla": "‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü‡ßá ‡¶Ø‡¶æ‡¶á‡•§"},
    "sehen": {"bangla": "‡¶¶‡ßá‡¶ñ‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶≠‡¶ø‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶ø‡•§"},
    "trinken": {"bangla": "‡¶™‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶æ‡¶®‡¶ø ‡¶™‡¶æ‡¶® ‡¶ï‡¶∞‡¶ø‡•§"},
    "essen": {"bangla": "‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡ßá‡¶≤ ‡¶ñ‡¶æ‡¶á‡•§"},
    "wohnen": {"bangla": "‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ", "sentence": "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶ø‡•§"},
}

# === Streamlit Setup ===
st.set_page_config(page_title="üê∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‚Üí German Game", page_icon="üá©üá™", layout="centered")
st.title("üê∞ üáßüá© ‚ûú üá©üá™ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‚Üí ‡¶ú‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶® ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ó‡ßá‡¶Æ üéÆ")
st.caption("Level up, no repeats ‚Äî and see results after every stage!")

# === Initialize State ===
if "init" not in st.session_state:
    st.session_state.init = True
    st.session_state.level = 1
    st.session_state.score = 0
    st.session_state.correct = 0
    st.session_state.wrong = 0
    st.session_state.used_words = set()  # Already correct words
    st.session_state.retry_words = []    # Wrong ones for next level
    st.session_state.results = []
    st.session_state.current_questions = []
    st.session_state.current_index = 0
    st.session_state.hint_used = False

# === Helper Functions ===
def level_target(level):
    """Return how many questions this level should have"""
    return 2 + level  # level 1‚Üí3, level 2‚Üí4, level 3‚Üí5 ...

def load_next_level():
    """Load new questions (retry + new ones)"""
    all_items = list(vocab.items())
    remaining = [(g, v) for g, v in all_items if g not in st.session_state.used_words]

    new_set = st.session_state.retry_words.copy()
    st.session_state.retry_words = []

    needed = level_target(st.session_state.level)
    fresh = [item for item in remaining if item not in new_set]
    random.shuffle(fresh)
    new_set.extend(fresh[:max(0, needed - len(new_set))])

    st.session_state.current_questions = new_set
    st.session_state.current_index = 0
    st.session_state.hint_used = False
    st.session_state.level_start = time.time()

def remaining_time(start, total=15):
    return max(0, int(total - (time.time() - start)))

# Load first level if empty
if not st.session_state.current_questions:
    load_next_level()

# === GAME LOOP ===
if st.session_state.current_index < len(st.session_state.current_questions):
    german, info = st.session_state.current_questions[st.session_state.current_index]
    bangla = info["bangla"]
    sentence = info["sentence"]

    st.markdown(f"### üéØ Level {st.session_state.level}")
    st.info(f"Question {st.session_state.current_index + 1}/{len(st.session_state.current_questions)}")
    st.markdown(f"**'{bangla}' ‡¶∂‡¶¨‡ßç‡¶¶‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:**")

    if st.session_state.hint_used:
        st.caption(f"üí° Hint: {sentence}")

    ans_key = f"ans_{st.session_state.level}_{st.session_state.current_index}"
    ans = st.text_input("‚úçÔ∏è Type your German answer:", key=ans_key)

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üí° Hint"):
            st.session_state.hint_used = True
            st.rerun()

    with col2:
        if st.button("‚úÖ Submit"):
            correct_ans = german.lower()
            given = ans.strip().lower()
            is_correct = given == correct_ans

            if is_correct:
                st.success("‚úÖ Correct! Well done!")
                st.image("https://media.tenor.com/5nZqVYpE6m4AAAAi/cute-rabbit-thumbs-up.gif",
                         caption="üê∞ Thumbs Up!")
                st.session_state.score += 10
                st.session_state.correct += 1
                st.session_state.used_words.add(german)
            else:
                st.error(f"‚ùå Wrong! Correct answer: {german}")
                st.image("https://media.tenor.com/bTFeixbXb2kAAAAi/sad-rabbit-no.gif",
                         caption="üê∞ Thumbs Down!")
                st.session_state.retry_words.append((german, info))
                st.session_state.wrong += 1

            st.session_state.results.append({
                "Level": st.session_state.level,
                "Bangla": bangla,
                "Your Answer": ans if ans else "‚Äî",
                "Correct German": german,
                "Result": "‚úÖ" if is_correct else "‚ùå"
            })

            st.session_state.current_index += 1
            st.session_state.hint_used = False
            st.rerun()

    with col3:
        if st.button("‚è≠Ô∏è Skip"):
            st.session_state.retry_words.append((german, info))
            st.session_state.results.append({
                "Level": st.session_state.level,
                "Bangla": bangla,
                "Your Answer": "Skipped",
                "Correct German": german,
                "Result": "‚ùå"
            })
            st.session_state.wrong += 1
            st.session_state.current_index += 1
            st.session_state.hint_used = False
            st.rerun()

# === LEVEL COMPLETE ===
else:
    total_words = len(vocab)
    remaining_words = total_words - len(st.session_state.used_words)

    st.balloons()
    st.success(f"üéâ Level {st.session_state.level} Complete!")
    st.metric("Score", st.session_state.score)
    st.metric("Correct", st.session_state.correct)
    st.metric("Wrong", st.session_state.wrong)
    st.metric("Words Remaining", remaining_words)

    st.write("### üìã Level Results:")
    level_df = pd.DataFrame(
        [r for r in st.session_state.results if r["Level"] == st.session_state.level]
    )
    st.dataframe(level_df)

    # Continue or End
    if st.session_state.retry_words or remaining_words > 0:
        next_level = st.session_state.level + 1
        if st.button(f"üöÄ Start Level {next_level} ({level_target(next_level)} Questions)"):
            st.session_state.level = next_level
            load_next_level()
            st.rerun()
    else:
        st.success("üèÅ Game Over ‚Äî All Words Mastered! üéì")
        st.metric("Final Score", st.session_state.score)
        st.metric("Total Correct", st.session_state.correct)
        st.metric("Total Wrong", st.session_state.wrong)
        st.write("### üßæ Full Game Summary:")
        st.dataframe(pd.DataFrame(st.session_state.results))
        if st.button("üîÅ Restart Game"):
            for k in list(st.session_state.keys()):
                del st.session_state[k]
            st.rerun()



